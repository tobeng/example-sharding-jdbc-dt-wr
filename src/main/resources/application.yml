server:
  port: 8088

spring:
  shardingsphere:
    datasource:
      # 数据源
      master0:
        driver-class-name: com.mysql.jdbc.Driver
        password:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://120.78.206.144:3306/ds_1?characterEncoding=utf-8
        username: root
      master0slave:
        driver-class-name: com.mysql.jdbc.Driver
        password:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://120.78.206.144:3306/ds_1_slave?characterEncoding=utf-8
        username: root
      master1:
        driver-class-name: com.mysql.jdbc.Driver
        password:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://120.78.206.144:3306/ds_2?characterEncoding=utf-8
        username: root
      master1slave:
        driver-class-name: com.mysql.jdbc.Driver
        password:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://120.78.206.144:3306/ds_2_slave?characterEncoding=utf-8
        username: root
      names: master0,master0slave,master1,master1slave
    sharding:
      # 分库配置
      default-database-strategy:
        inline:
          algorithm-expression: ds$->{id % 2}
          sharding-column: id
      # 读写分离配置
      master-slave-rules:
        ds0:
          master-data-source-name: master0
          slave-data-source-names: master0slave
        ds1:
          master-data-source-name: master1
          slave-data-source-names: master1slave
      # 分表配置
      tables:
        user:
          actual-data-nodes: ds$->{0..1}.user_$->{0..2}
          key-generator:
            column: id
            type: SNOWFLAKE
          # 分表算法
          table-strategy:
            inline:
              algorithm-expression: user_$->{id % 3}
              sharding-column: id